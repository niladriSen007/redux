{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\n// Define a service using a base URL and expected endpoints\nexport const adminApi = createApi({\n  reducerPath: 'adminApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `http://localhost:8000/`\n  }),\n  endpoints: builder => ({\n    getUserById: builder.query({\n      query: id => `accounts/${id}`\n    })\n  })\n});\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const {\n  useGetUserByIdQuery\n} = adminApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","adminApi","reducerPath","baseQuery","baseUrl","endpoints","builder","getUserById","query","id","useGetUserByIdQuery"],"sources":["C:/Users/NILADRI/Desktop/redux/redux_toolkit/src/api/adminSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\n// Define a service using a base URL and expected endpoints\r\nexport const adminApi = createApi({\r\n  reducerPath: 'adminApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl: `http://localhost:8000/` }),\r\n  endpoints: (builder) => ({\r\n    getUserById: builder.query({\r\n      query: (id) => `accounts/${id}`,\r\n    }),\r\n  }),\r\n})\r\n\r\n// Export hooks for usage in functional components, which are\r\n// auto-generated based on the defined endpoints\r\nexport const { useGetUserByIdQuery } = adminApi"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;;AAExE;AACA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAG;EAAwB,CAAC,CAAC;EAChEC,SAAS,EAAGC,OAAO,KAAM;IACvBC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAC;MACzBA,KAAK,EAAGC,EAAE,IAAM,YAAWA,EAAG;IAChC,CAAC;EACH,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAM;EAAEC;AAAoB,CAAC,GAAGT,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}