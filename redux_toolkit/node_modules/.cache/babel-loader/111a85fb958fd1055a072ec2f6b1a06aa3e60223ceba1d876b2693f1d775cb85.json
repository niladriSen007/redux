{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  amount: 100\n};\nconst fetchUserById = createAsyncThunk('users/fetchByIdStatus', async (userId, thunkAPI) => {\n  const response = await axios.get(`http://localhost:8000/accounts/${userId}`);\n  return response.data;\n});\nfetchUserById(2);\nexport const accountSlice = createSlice({\n  name: 'account',\n  initialState,\n  reducers: {\n    incrementAmount(state) {\n      state.amount += 100;\n    },\n    incrementAmountByValue(state, action) {\n      state.amount += action.payload;\n    },\n    decrementAmount(state) {\n      state.amount -= 10;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUserById);\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  incrementAmount,\n  decrementAmount,\n  incrementAmountByValue\n} = accountSlice.actions;\nexport default accountSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","amount","fetchUserById","userId","thunkAPI","response","get","data","accountSlice","name","reducers","incrementAmount","state","incrementAmountByValue","action","payload","decrementAmount","extraReducers","builder","addCase","actions","reducer"],"sources":["C:/Users/NILADRI/Desktop/redux/redux_toolkit/src/slices/accountSlice.jsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n  amount: 100,\r\n}\r\n\r\n\r\n\r\nconst fetchUserById = createAsyncThunk(\r\n  'users/fetchByIdStatus',\r\n  async (userId, thunkAPI) => {\r\n    const response = await axios.get(`http://localhost:8000/accounts/${userId}`)\r\n    return response.data\r\n  }\r\n)\r\n\r\nfetchUserById(2)\r\n\r\n\r\nexport const accountSlice = createSlice({\r\n  name: 'account',\r\n  initialState,\r\n  reducers: {\r\n    incrementAmount(state){\r\n        state.amount += 100\r\n    },\r\n    incrementAmountByValue(state,action){\r\n        state.amount += action.payload\r\n    },\r\n    decrementAmount(state){\r\n        state.amount -= 10\r\n    },\r\n  },\r\n  extraReducers:(builder)=>{\r\n    builder.addCase(fetchUserById)\r\n  }\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { incrementAmount,decrementAmount,incrementAmountByValue } = accountSlice.actions\r\n\r\nexport default accountSlice.reducer"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE;AACV,CAAC;AAID,MAAMC,aAAa,GAAGL,gBAAgB,CACpC,uBAAuB,EACvB,OAAOM,MAAM,EAAEC,QAAQ,KAAK;EAC1B,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAE,kCAAiCH,MAAO,EAAC,CAAC;EAC5E,OAAOE,QAAQ,CAACE,IAAI;AACtB,CAAC,CACF;AAEDL,aAAa,CAAC,CAAC,CAAC;AAGhB,OAAO,MAAMM,YAAY,GAAGV,WAAW,CAAC;EACtCW,IAAI,EAAE,SAAS;EACfT,YAAY;EACZU,QAAQ,EAAE;IACRC,eAAeA,CAACC,KAAK,EAAC;MAClBA,KAAK,CAACX,MAAM,IAAI,GAAG;IACvB,CAAC;IACDY,sBAAsBA,CAACD,KAAK,EAACE,MAAM,EAAC;MAChCF,KAAK,CAACX,MAAM,IAAIa,MAAM,CAACC,OAAO;IAClC,CAAC;IACDC,eAAeA,CAACJ,KAAK,EAAC;MAClBA,KAAK,CAACX,MAAM,IAAI,EAAE;IACtB;EACF,CAAC;EACDgB,aAAa,EAAEC,OAAO,IAAG;IACvBA,OAAO,CAACC,OAAO,CAACjB,aAAa,CAAC;EAChC;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAES,eAAe;EAACK,eAAe;EAACH;AAAuB,CAAC,GAAGL,YAAY,CAACY,OAAO;AAE9F,eAAeZ,YAAY,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}