{"ast":null,"code":"import { createReducer, createAction } from \"@reduxjs/toolkit\";\nconst initialState = {\n  rewards: 0\n};\nexport const ADD_REWARD = createAction(\"addreward\");\nexport const rewardReducer = createReducer(initialState, builder => {\n  builder.addCase(ADD_REWARD, (state, action) => {\n    // \"mutate\" the array by calling push()\n    state.rewards += 500;\n  }).addCase('REMOVE_REWARD', (state, action) => {\n    // Can still return an immutably-updated value if we want to\n    state.rewards -= 50;\n  });\n});","map":{"version":3,"names":["createReducer","createAction","initialState","rewards","ADD_REWARD","rewardReducer","builder","addCase","state","action"],"sources":["C:/Users/NILADRI/Desktop/redux/redux_toolkit/src/reducers/rewardReducer.jsx"],"sourcesContent":["import { createReducer,createAction } from \"@reduxjs/toolkit\"\r\n\r\nconst initialState = {\r\n    rewards: 0,\r\n}\r\n\r\nexport const ADD_REWARD = createAction(\"addreward\")\r\n\r\nexport const rewardReducer = createReducer(initialState, (builder) => {\r\n    builder\r\n      .addCase(ADD_REWARD, (state, action) => {\r\n        // \"mutate\" the array by calling push()\r\n        state.rewards += 500\r\n      })\r\n      .addCase('REMOVE_REWARD', (state, action) => {\r\n        // Can still return an immutably-updated value if we want to\r\n        state.rewards -= 50\r\n      })\r\n  })"],"mappings":"AAAA,SAASA,aAAa,EAACC,YAAY,QAAQ,kBAAkB;AAE7D,MAAMC,YAAY,GAAG;EACjBC,OAAO,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGH,YAAY,CAAC,WAAW,CAAC;AAEnD,OAAO,MAAMI,aAAa,GAAGL,aAAa,CAACE,YAAY,EAAGI,OAAO,IAAK;EAClEA,OAAO,CACJC,OAAO,CAACH,UAAU,EAAE,CAACI,KAAK,EAAEC,MAAM,KAAK;IACtC;IACAD,KAAK,CAACL,OAAO,IAAI,GAAG;EACtB,CAAC,CAAC,CACDI,OAAO,CAAC,eAAe,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;IAC3C;IACAD,KAAK,CAACL,OAAO,IAAI,EAAE;EACrB,CAAC,CAAC;AACN,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}